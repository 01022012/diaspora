-#   Copyright (c) 2010, Diaspora Inc.  This file is
-#   licensed under the Affero General Public License version 3 or later.  See
-#   the COPYRIGHT file.


:javascript
  $(document).ready( function(){
    $(".contact_list_search").keyup(function(e){
      var search = $(this);
      var list   = $(this).siblings("ul").first();
      var query  = new RegExp(search.val(),'i');

      $("li", list).each( function() {
        var element = $(this);
        if( !element.text().match(query) ){
          if( !element.hasClass('invis') ){
            element.addClass('invis').slideUp(100);
          }
        } else {
          element.removeClass('invis').slideDown(100);
        }
      });
    });
  });


.contact_list
  = search_field_tag :contact_search, "", :class => 'contact_list_search', :results => 5, :placeholder => t('.search_contacts')
  
  %ul
    - for contact in contacts
      %li
        - unless contact.aspect_ids.include?(aspect.id)
          = form_tag '/aspects/add_to_aspect' do
            = person_image_tag contact.person
            %span.name
              = link_to contact.person.real_name, contact.person
            .right
              = hidden_field_tag :aspect_id, aspect.id
              = hidden_field_tag :person_id, contact.person.id
              - if defined?(manage) && manage
                = hidden_field_tag :manage, true
              = submit_tag '+', :class => 'add', :title => t('.add_to', :name => contact.person.real_name, :aspect => aspect)
        - else
          = form_tag '/aspects/remove_from_aspect' do
            = person_image_tag contact.person
            %span.name
              = link_to contact.person.real_name, contact.person
            .right
              = hidden_field_tag :aspect_id, aspect.id
              = hidden_field_tag :person_id, contact.person.id
              - if defined?(manage) && manage
                = hidden_field_tag :manage, true
              = submit_tag 'x', :class => 'remove', :title => t('.remove_from', :name => contact.person.real_name, :aspect => aspect)

